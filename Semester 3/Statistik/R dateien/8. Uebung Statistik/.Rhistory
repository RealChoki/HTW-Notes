knitr::opts_chunk$set(echo = TRUE)
daten <- matrix(c(223, 75, 107, 21), nrow=2, byrow=T,
dimnames=list(c("mit Creme","ohne Creme"),
c("besser","schlechter")))
kable(daten)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
betriebe_daten <- matrix(c(639,64,41,487,131,41,203,153,33,54,91,17,46,112,18),
nrow=5, ncol=3, byrow=T,
dimnames=list(c("[0,50)", "[50, 180)",
"[180, 500)", "[500, 1000)", ">= 1000"),
c("Vollzeit", "Nebenerwerb", "Pacht")))
kable(betriebe_daten)
daten <- matrix(c(223, 75, 107, 21), nrow=2, byrow=T,
dimnames=list(c("mit Creme","ohne Creme"),
c("besser","schlechter")))
kable(daten)
daten2 <- matrix(c(298, 0, 0, 128), nrow=2, byrow=T,
dimnames=list(c("mit Creme","ohne Creme"),
c("besser","schlechter")))
kable(daten2)
# Berechnung von Pearsons Chi-Quadrat-Statistik
chi2 <- chisq.test(betriebe_daten)
# Phi-Koeffizient
phi <- Phi(betriebe_daten)
install.packages("vcd")
install.packages("DescTools")
# Berechnung von Pearsons Chi-Quadrat-Statistik
chi2 <- chisq.test(betriebe_daten)
# Phi-Koeffizient
phi <- Phi(betriebe_daten)
library(knitr)
betriebe_daten <- matrix(c(639,64,41,487,131,41,203,153,33,54,91,17,46,112,18),
nrow=5, ncol=3, byrow=T,
dimnames=list(c("[0,50)", "[50, 180)",
"[180, 500)", "[500, 1000)", ">= 1000"),
c("Vollzeit", "Nebenerwerb", "Pacht")))
library(knitr)
library(vcd)
library(DescTools)
kable(betriebe_daten)
# Berechnung von Pearsons Chi-Quadrat-Statistik
chi2 <- chisq.test(betriebe_daten)
# Phi-Koeffizient
phi <- Phi(betriebe_daten)
# Kontingenzmaß C nach Pearson
cont_coef <- ContCoef(betriebe_daten)
# Kontingenzmaß V nach Cramer
cramer_v <- CramerV(betriebe_daten)
# Ergebnisse ausgeben
chi2
phi
cont_coef
cramer_v
expected <- chi2$expected
# Tabelle anzeigen
kable(expected)
relative_expected <- expected / sum(betriebe_daten)
# Tabelle anzeigen
kable(relative_expected)
# Mosaikplot der Originaltabelle
mosaicplot(betriebe_daten, main = "Originaldaten", color = TRUE)
# Mosaikplot der erwarteten Häufigkeiten
mosaicplot(expected, main = "Erwartete Häufigkeiten", color = TRUE)
# Chi-Quadrat-Test für erwartete Häufigkeiten
chi2_expected <- chisq.test(expected)
# Phi-Koeffizient
phi_expected <- Phi(expected)
# Kontingenzmaß C nach Pearson
cont_coef_expected <- ContCoef(expected)
# Kontingenzmaß V nach Cramer
cramer_v_expected <- CramerV(expected)
# Ergebnisse ausgeben
chi2_expected
phi_expected
cont_coef_expected
cramer_v_expected
# Chi-Quadrat-Statistik händisch berechnen
observed <- betriebe_daten
expected <- chi2$expected
chi2_manual <- sum((observed - expected)^2 / expected)
# Gesamtanzahl der Beobachtungen
n <- sum(observed)
# Anzahl der Zeilen und Spalten
k <- min(nrow(observed), ncol(observed))
# Phi-Koeffizient händisch berechnen
phi_manual <- sqrt(chi2_manual / n)
# Cramers V händisch berechnen
cramer_v_manual <- sqrt(chi2_manual / (n * (k - 1)))
# Ergebnisse ausgeben
chi2_manual
phi_manual
cramer_v_manual
# Mosaikplot der Originaltabelle
mosaicplot(betriebe_daten, main = "Originaldaten", color = TRUE)
# Mosaikplot der erwarteten Häufigkeiten
mosaicplot(expected, main = "Erwartete Häufigkeiten", color = TRUE)
# Mosaikplot der Originaltabelle
mosaicplot(betriebe_daten, main = "Originaldaten", color = TRUE)
# Mosaikplot der erwarteten Häufigkeiten
mosaicplot(expected, main = "Erwartete Haeufigkeiten", color = TRUE)
# Berechnung von Pearsons Chi-Quadrat-Statistik
chi2 <- chisq.test(betriebe_daten)
# Berechnung von Pearsons Chi-Quadrat-Statistik
chi2 <- chisq.test(betriebe_daten)
# Phi-Koeffizient
phi <- Phi(betriebe_daten)
# Kontingenzmaß C nach Pearson
cont_coef <- ContCoef(betriebe_daten)
# Kontingenzmaß V nach Cramer
cramer_v <- CramerV(betriebe_daten)
# Ergebnisse ausgeben
chi2
phi
cont_coef
cramer_v
phi
cont_coef
cramer_v
# Ergebnisse ausgeben
chi2
expected <- chi2$expected
# Tabelle anzeigen
kable(expected)
# Ergebnisse ausgeben
chi2
# Ergebnisse ausgeben
chi2$expected
relative_expected <- expected / sum(betriebe_daten)
relative_expected <- expected / sum(betriebe_daten)
expected <- chi2$expected
relative_expected <- expected / sum(betriebe_daten)
# Tabelle anzeigen
kable(relative_expected)
expected <- chi2$expected
# Tabelle anzeigen
expected
relative_expected <- expected / sum(betriebe_daten)
# Tabelle anzeigen
relative_expected
# Chi-Quadrat-Test für erwartete Häufigkeiten
chi2_expected <- chisq.test(expected)
# Phi-Koeffizient
phi_expected <- Phi(expected)
# Kontingenzmaß C nach Pearson
cont_coef_expected <- ContCoef(expected)
# Kontingenzmaß V nach Cramer
cramer_v_expected <- CramerV(expected)
# Ergebnisse ausgeben
chi2_expected
phi_expected
cont_coef_expected
cramer_v_expected
daten <- matrix(c(223, 75, 107, 21), nrow=2, byrow=T,
dimnames=list(c("mit Creme","ohne Creme"),
c("besser","schlechter")))
kable(daten)
# Bedingte relative Häufigkeiten
f_creme_besser <- daten["mit Creme", "besser"] / sum(daten[, "besser"])
f_ohne_creme_besser <- daten["ohne Creme", "besser"] / sum(daten[, "besser"])
# Ergebnisse ausgeben
f_creme_besser
f_ohne_creme_besser
daten["mit Creme", "besser"]
sum(daten[, "besser"]
sum(daten[, "besser"]
sum(daten[, "besser"]
sum(daten[, "besser"]
sum(daten[, "besser"])
daten[, "besser"]
# Bedingte relative Häufigkeiten
f_creme_besser <- daten["mit Creme", "besser"] / sum(daten[, "besser"])
f_ohne_creme_besser <- daten["ohne Creme", "besser"] / sum(daten[, "besser"])
# Ergebnisse ausgeben
f_creme_besser
f_ohne_creme_besser
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
betriebe_daten <- matrix(c(639,64,41,487,131,41,203,153,33,54,91,17,46,112,18),
nrow=5, ncol=3, byrow=T,
dimnames=list(c("[0,50)", "[50, 180)",
"[180, 500)", "[500, 1000)", ">= 1000"),
c("Vollzeit", "Nebenerwerb", "Pacht")))
library(knitr)
library(vcd)
library(DescTools)
kable(betriebe_daten)
# Berechnung von Pearsons Chi-Quadrat-Statistik
chi2 <- chisq.test(betriebe_daten)
# Phi-Koeffizient
phi <- Phi(betriebe_daten)
# Kontingenzmaß C nach Pearson
cont_coef <- ContCoef(betriebe_daten)
# Kontingenzmaß V nach Cramer
cramer_v <- CramerV(betriebe_daten)
# Ergebnisse ausgeben
chi2$expected
phi
cont_coef
cramer_v
expected <- chi2$expected
# Tabelle anzeigen
expected
relative_expected <- expected / sum(betriebe_daten)
# Tabelle anzeigen
relative_expected
# Mosaikplot der Originaltabelle
mosaicplot(betriebe_daten, main = "Originaldaten", color = TRUE)
# Mosaikplot der erwarteten Häufigkeiten
mosaicplot(expected, main = "Erwartete Haeufigkeiten", color = TRUE)
# Chi-Quadrat-Test für erwartete Häufigkeiten
chi2_expected <- chisq.test(expected)
# Phi-Koeffizient
phi_expected <- Phi(expected)
# Kontingenzmaß C nach Pearson
cont_coef_expected <- ContCoef(expected)
# Kontingenzmaß V nach Cramer
cramer_v_expected <- CramerV(expected)
# Ergebnisse ausgeben
chi2_expected
phi_expected
cont_coef_expected
cramer_v_expected
# Chi-Quadrat-Statistik händisch berechnen
observed <- betriebe_daten
expected <- chi2$expected
chi2_manual <- sum((observed - expected)^2 / expected)
# Gesamtanzahl der Beobachtungen
n <- sum(observed)
# Anzahl der Zeilen und Spalten
k <- min(nrow(observed), ncol(observed))
# Phi-Koeffizient händisch berechnen
phi_manual <- sqrt(chi2_manual / n)
# Cramers V händisch berechnen
cramer_v_manual <- sqrt(chi2_manual / (n * (k - 1)))
# Ergebnisse ausgeben
chi2_manual
phi_manual
cramer_v_manual
daten <- matrix(c(223, 75, 107, 21), nrow=2, byrow=T,
dimnames=list(c("mit Creme","ohne Creme"),
c("besser","schlechter")))
kable(daten)
# Bedingte relative Häufigkeiten
f_creme_besser <- daten["mit Creme", "besser"] / sum(daten[, "besser"])
f_ohne_creme_besser <- daten["ohne Creme", "besser"] / sum(daten[, "besser"])
# Ergebnisse ausgeben
f_creme_besser
f_ohne_creme_besser
# Erwartete absolute Häufigkeiten berechnen
chisq_test <- chisq.test(daten)
expected <- chisq_test$expected
# Tabelle anzeigen
kable(expected)
# Bibliotheken laden
library(vcd)
# Berechnung der Assoziationsstatistiken
assoc_stats <- assocstats(daten)
# Ergebnisse ausgeben
assoc_stats
# Berechnung von Pearsons Chi-Quadrat-Statistik
chisq_test2 <- chisq.test(daten2, correct = FALSE)
# Ergebnisse ausgeben
chisq_test2$statistic
chisq_test2$p.value
# Berechnung des Phi-Koeffizienten
phi2 <- Phi(daten2)
# Ergebnis ausgeben
phi2
# Berechnung von Cramers V
cramer_v2 <- CramerV(daten2)
# Ergebnis ausgeben
cramer_v2
