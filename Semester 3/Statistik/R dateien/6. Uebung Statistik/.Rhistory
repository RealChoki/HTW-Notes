plot(zulassungen)
plot(zulassungen)
plot(zulassungen$Stueckzahl)
# Daten laden
Stueckzahl <- zulassungen$Stueckzahl
# Sortieren der Stückzahlen
Stueckzahl_sortiert <- sort(Stueckzahl)
# Absolute Häufigkeit (h_i)
h_i <- rep(1, length(Stueckzahl_sortiert))
# Relative Häufigkeit (f_i)
f_i <- h_i / length(Stueckzahl_sortiert)
# Kumulierte relative Häufigkeit (F_i)
F_i <- cumsum(f_i)
# Stückzahl jedes Herstellers (h_i^*)
h_i_star <- Stueckzahl_sortiert
# Relative Stückzahl jedes Herstellers (f_i^*)
f_i_star <- h_i_star / sum(h_i_star)
# Kumulierte relative Stückzahl (F_i^*)
F_i_star <- cumsum(f_i_star)
# Lorenzkurve plotten
plot(F_i_star, F_i, type = "l", col = "blue", xlab = "Kumulierte relative Stückzahl", ylab = "Kumulierte relative Häufigkeit", main = "Lorenzkurve der Stückzahlen")
# Daten laden
Stueckzahl <- zulassungen$Stueckzahl
# Sortieren der Stückzahlen
Stueckzahl_sortiert <- sort(Stueckzahl)
# Absolute Häufigkeit (h_i)
h_i <- rep(1, length(Stueckzahl_sortiert))
# Relative Häufigkeit (f_i)
f_i <- h_i / length(Stueckzahl_sortiert)
# Kumulierte relative Häufigkeit (F_i)
F_i <- cumsum(f_i)
# Stückzahl jedes Herstellers (h_i^*)
h_i_star <- Stueckzahl_sortiert
# Relative Stückzahl jedes Herstellers (f_i^*)
f_i_star <- h_i_star / sum(h_i_star)
# Kumulierte relative Stückzahl (F_i^*)
F_i_star <- cumsum(f_i_star)
# Lorenzkurve plotten
plot(F_i_star, F_i, type = "l", col = "blue", xlab = "Kumulierte relative Stückzahl", ylab = "Kumulierte relative Häufigkeit", main = "Lorenzkurve")
# Daten laden
Stueckzahl <- zulassungen$Stueckzahl
# Sortieren der Stückzahlen
Stueckzahl_sortiert <- sort(Stueckzahl)
# Absolute Häufigkeit (h_i)
h_i <- rep(1, length(Stueckzahl_sortiert))
# Relative Häufigkeit (f_i)
f_i <- h_i / length(Stueckzahl_sortiert)
# Kumulierte relative Häufigkeit (F_i)
F_i <- cumsum(f_i)
# Stückzahl jedes Herstellers (h_i^*)
h_i_star <- Stueckzahl_sortiert
# Relative Stückzahl jedes Herstellers (f_i^*)
f_i_star <- h_i_star / sum(h_i_star)
# Kumulierte relative Stückzahl (F_i^*)
F_i_star <- cumsum(f_i_star)
# Lorenzkurve plotten
plot(F_i_star, F_i, type = "l", col = "blue", xlab = "Kumulierte relative Stueckzahl", ylab = "Kumulierte relative Haeufigkeit", main = "Lorenzkurve")
?rep
# Absolute Häufigkeit (h_i)
h_i <- rep(1, length(Stueckzahl_sortiert))
h_i
f_i
F_i
h_i_star
f_i_star
# Daten laden
Stueckzahl <- zulassungen$Stueckzahl
# Sortieren der Stückzahlen
Stueckzahl_sortiert <- sort(Stueckzahl)
# Absolute Häufigkeit (h_i)
h_i <- rep(1, length(Stueckzahl_sortiert))
# Relative Häufigkeit (f_i)
f_i <- h_i / length(Stueckzahl_sortiert)
# Kumulierte relative Häufigkeit (F_i)
F_i <- cumsum(f_i)
# Stückzahl jedes Herstellers (h_i^*)
h_i_star <- Stueckzahl_sortiert
# Relative Stückzahl jedes Herstellers (f_i^*)
f_i_star <- h_i_star / sum(h_i_star)
# Kumulierte relative Stückzahl (F_i^*)
F_i_star <- cumsum(f_i_star)
# Lorenzkurve plotten
plot(F_i_star, F_i, type = "l", col = "blue", xlab = "Kumulierte relative Stueckzahl", ylab = "Kumulierte relative Haeufigkeit", main = "Lorenzkurve")
# Daten laden
Stueckzahl <- zulassungen$Stueckzahl
# Sortieren der Stückzahlen
Stueckzahl_sortiert <- sort(Stueckzahl)
# Absolute Häufigkeit (h_i)
h_i <- rep(1, length(Stueckzahl_sortiert))
# Relative Häufigkeit (f_i)
f_i <- h_i / length(Stueckzahl_sortiert)
# Kumulierte relative Häufigkeit (F_i)
F_i <- cumsum(f_i)
# Stückzahl jedes Herstellers (h_i^*)
h_i_star <- Stueckzahl_sortiert
# Relative Stückzahl jedes Herstellers (f_i^*)
f_i_star <- h_i_star / sum(h_i_star)
# Kumulierte relative Stückzahl (F_i^*)
F_i_star <- cumsum(f_i_star)
# Lorenzkurve plotten
plot(F_i_star, F_i, col = "blue", xlab = "Kumulierte relative Stueckzahl", ylab = "Kumulierte relative Haeufigkeit", main = "Lorenzkurve")
# Daten laden
Stueckzahl <- zulassungen$Stueckzahl
# Sortieren der Stückzahlen
Stueckzahl_sortiert <- sort(Stueckzahl)
# Absolute Häufigkeit (h_i)
h_i <- rep(1, length(Stueckzahl_sortiert))
# Relative Häufigkeit (f_i)
f_i <- h_i / length(Stueckzahl_sortiert)
# Kumulierte relative Häufigkeit (F_i)
F_i <- cumsum(f_i)
# Stückzahl jedes Herstellers (h_i^*)
h_i_star <- Stueckzahl_sortiert
# Relative Stückzahl jedes Herstellers (f_i^*)
f_i_star <- h_i_star / sum(h_i_star)
# Kumulierte relative Stückzahl (F_i^*)
F_i_star <- cumsum(f_i_star)
# Lorenzkurve plotten
plot(F_i_star, F_i, type = "l", col = "blue", xlab = "Kumulierte relative Stueckzahl", ylab = "Kumulierte relative Haeufigkeit", main = "Lorenzkurve")
lorenz <- Lc(Stueckzahl)
library(ineq)
knitr::opts_chunk$set(echo = TRUE)
bmw <- read.csv2("C:/Users/rafaa/Desktop/HTW MODULE/Semester 3/Statistik/data/bmw.csv")
schluss <- as.numeric(bmw$Schluss)
# a)
# Mittlere absolute Abweichung vom arithmetischen Mittel
mean(abs(schluss - mean(schluss)))
# Varianz
mean((schluss - mean(schluss))^2)
# Standardabweichung
sqrt(mean((schluss - mean(schluss))^2))
# b)
# Mittlere absolute Abweichung vom arithmetischen Mittel
mean(abs(schluss - mean(schluss)))
# Varianz
var(schluss)
# Standardabweichung
sd(schluss)
# Variationskoeffizient Volkswagen
10.28 / 174.56 * 100
# Variationskoeffizient BMW AG
4.68 / 36.96 * 100
# 5,89% und 12,66%.
#Ein niedrigerer Variationskoeffizient deutet auf eine geringere Streuung im Verhältnis zum Mittelwert hin, während ein höherer Wert auf eine größere Streuung hindeutet.
#In diesem Fall hat die BMW-Aktie einen höheren Variationskoeffizienten als die Volkswagenaktie, was darauf hindeutet, dass die Streuung der BMW-Aktie im Verhältnis zum Mittelwert größer ist als die Streuung der Volkswagenaktie.
#Dies könnte darauf hinweisen, dass die BMW-Aktie volatiler ist oder größere Schwankungen im Preis im Vergleich zur Volkswagenaktie aufweist.
library(knitr)
zulassungen <- read.csv("C:/Users/rafaa/Desktop/HTW MODULE/Semester 3/Statistik/data/neuzulassungen.csv")
kable(zulassungen)
# Daten laden
Stueckzahl <- zulassungen$Stueckzahl
# Sortieren der Stückzahlen
Stueckzahl_sortiert <- sort(Stueckzahl)
# Absolute Häufigkeit (h_i)
h_i <- rep(1, length(Stueckzahl_sortiert))
# Relative Häufigkeit (f_i)
f_i <- h_i / length(Stueckzahl_sortiert)
# Kumulierte relative Häufigkeit (F_i)
F_i <- cumsum(f_i)
# Stückzahl jedes Herstellers (h_i^*)
h_i_star <- Stueckzahl_sortiert
# Relative Stückzahl jedes Herstellers (f_i^*)
f_i_star <- h_i_star / sum(h_i_star)
# Kumulierte relative Stückzahl (F_i^*)
F_i_star <- cumsum(f_i_star)
# Lorenzkurve plotten
plot(F_i_star, F_i, type = "l", col = "blue", xlab = "Kumulierte relative Stueckzahl", ylab = "Kumulierte relative Haeufigkeit", main = "Lorenzkurve")
library(ineq)
install.packages("ineq")
library(ineq)
lorenz <- Lc(Stueckzahl)
# Lorenzkurve plotten
plot(lorenz, col = "blue", xlab = "Kumulierte relative Stueckzahl", ylab = "Kumulierte relative Hauefigkeit", main = "Lorenzkurve")
install.packages("ineq")
library(ineq)
lorenz <- Lc(Stueckzahl)
# Lorenzkurve plotten
plot(lorenz, col = "blue", xlab = "Kumulierte relative Stueckzahl", ylab = "Kumulierte relative Hauefigkeit", main = "Lorenzkurve")
install.packages("ineq")
library(ineq)
lorenz <- Lc(Stueckzahl)
# Lorenzkurve plotten
plot(lorenz, col = "blue", xlab = "Kumulierte relative Stueckzahl", ylab = "Kumulierte relative Hauefigkeit", main = "Lorenzkurve")
lorenz <- Lc(Stueckzahl)
# Lorenzkurve plotten
plot(lorenz, col = "blue", xlab = "Kumulierte relative Stueckzahl", ylab = "Kumulierte relative Hauefigkeit", main = "Lorenzkurve")
lorenz <- Lc(Stueckzahl)
lorenz
# Lorenzkurve plotten
plot(lorenz, col = "blue", xlab = "Kumulierte relative Stueckzahl", ylab = "Kumulierte relative Hauefigkeit", main = "Lorenzkurve")
f_i
F_i
# Gini-Koeffizient berechnen
ineq(Stueckzahl, type = "Gini")
# Normierter Gini-Koeffizient berechnen
Gini(Stueckzahl)
# Normierter Gini-Koeffizient berechnen
Gini(Stueckzahl)
# Gini-Koeffizient berechnen
ineq(Stueckzahl, type = "Gini")
# Normierter Gini-Koeffizient berechnen
Gini(Stueckzahl)
#weil die Lorenzkurve eine grafische Darstellung der Einkommens- oder Vermögensverteilung bietet, die zusätzliche Einblicke in die Ungleichheit liefert, wie etwa die Konzentration der Ungleichheit in bestimmten Bereichen der Verteilung oder das Vorhandensein von Ausreißern.
# Gini-Koeffizient berechnen
ineq(Stueckzahl)
# Normierter Gini-Koeffizient berechnen
Gini(Stueckzahl)
#weil die Lorenzkurve eine grafische Darstellung der Einkommens- oder Vermögensverteilung bietet, die zusätzliche Einblicke in die Ungleichheit liefert, wie etwa die Konzentration der Ungleichheit in bestimmten Bereichen der Verteilung oder das Vorhandensein von Ausreißern.
# Gini-Koeffizient berechnen
ineq(Stueckzahl, type = "Gini")
# Normierter Gini-Koeffizient berechnen
Gini(Stueckzahl)
#weil die Lorenzkurve eine grafische Darstellung der Einkommens- oder Vermögensverteilung bietet, die zusätzliche Einblicke in die Ungleichheit liefert, wie etwa die Konzentration der Ungleichheit in bestimmten Bereichen der Verteilung oder das Vorhandensein von Ausreißern.
knitr::opts_chunk$set(echo = TRUE)
bmw <- read.csv2("C:/Users/rafaa/Desktop/HTW MODULE/Semester 3/Statistik/data/bmw.csv")
schluss <- as.numeric(bmw$Schluss)
# a)
# Mittlere absolute Abweichung vom arithmetischen Mittel
mean(abs(schluss - mean(schluss)))
# Varianz
mean((schluss - mean(schluss))^2)
# Standardabweichung
sqrt(mean((schluss - mean(schluss))^2))
# b)
# Mittlere absolute Abweichung vom arithmetischen Mittel
mean(abs(schluss - mean(schluss)))
# Varianz
var(schluss)
# Standardabweichung
sd(schluss)
# Variationskoeffizient Volkswagen
10.28 / 174.56 * 100
# Variationskoeffizient BMW AG
4.68 / 36.96 * 100
# 5,89% und 12,66%.
#Ein niedrigerer Variationskoeffizient deutet auf eine geringere Streuung im Verhältnis zum Mittelwert hin, während ein höherer Wert auf eine größere Streuung hindeutet.
#In diesem Fall hat die BMW-Aktie einen höheren Variationskoeffizienten als die Volkswagenaktie, was darauf hindeutet, dass die Streuung der BMW-Aktie im Verhältnis zum Mittelwert größer ist als die Streuung der Volkswagenaktie.
#Dies könnte darauf hinweisen, dass die BMW-Aktie volatiler ist oder größere Schwankungen im Preis im Vergleich zur Volkswagenaktie aufweist.
library(knitr)
zulassungen <- read.csv("C:/Users/rafaa/Desktop/HTW MODULE/Semester 3/Statistik/data/neuzulassungen.csv")
kable(zulassungen)
# Daten laden
Stueckzahl <- zulassungen$Stueckzahl
# Sortieren der Stückzahlen
Stueckzahl_sortiert <- sort(Stueckzahl)
# Absolute Häufigkeit (h_i)
h_i <- rep(1, length(Stueckzahl_sortiert))
# Relative Häufigkeit (f_i)
f_i <- h_i / length(Stueckzahl_sortiert)
# Kumulierte relative Häufigkeit (F_i)
F_i <- cumsum(f_i)
# Stückzahl jedes Herstellers (h_i^*)
h_i_star <- Stueckzahl_sortiert
# Relative Stückzahl jedes Herstellers (f_i^*)
f_i_star <- h_i_star / sum(h_i_star)
# Kumulierte relative Stückzahl (F_i^*)
F_i_star <- cumsum(f_i_star)
# Lorenzkurve plotten
plot(F_i_star, F_i, type = "l", col = "blue", xlab = "Kumulierte relative Stueckzahl", ylab = "Kumulierte relative Haeufigkeit", main = "Lorenzkurve")
lorenz <- Lc(Stueckzahl)
# Lorenzkurve plotten
plot(lorenz, col = "blue", xlab = "Kumulierte relative Stueckzahl", ylab = "Kumulierte relative Hauefigkeit", main = "Lorenzkurve")
# Gini-Koeffizient berechnen
ineq(Stueckzahl, type = "Gini")
# Normierter Gini-Koeffizient berechnen
Gini(Stueckzahl)
#weil die Lorenzkurve eine grafische Darstellung der Einkommens- oder Vermögensverteilung bietet, die zusätzliche Einblicke in die Ungleichheit liefert, wie etwa die Konzentration der Ungleichheit in bestimmten Bereichen der Verteilung oder das Vorhandensein von Ausreißern.
# Anzahl der Beobachtungen
n <- length(Stueckzahl_sortiert)
# Relative kumulierte Stückzahl
F_i_star <- cumsum(Stueckzahl_sortiert) / sum(Stueckzahl_sortiert)
# Berechnung der Fläche zwischen Lorenzkurve und Diagonale
area <- sum(F_i_star) / n - 0.5
# Gini-Koeffizienten
gini <- 2 * area
gini
# Berechnung der Fläche zwischen Lorenzkurve und Diagonale
area <- sum(F_i_star) / n - 0.5
# Korrektur der Fläche
area_corrected <- 0.5 - area
# Gini-Koeffizienten
gini_corrected <- 2 * area_corrected
gini_corrected
# Berechnung der Fläche zwischen der Diagonale und der Lorenzkurve
area_lorenz <- sum(F_i_star) / n - 0.5
# Berechnung der Fläche zwischen der Diagonale und der x-Achse
area_diagonal <- 0.5
# Berechnung des Gini-Koeffizienten
gini <- area_lorenz / area_diagonal
gini
knitr::opts_chunk$set(echo = TRUE)
Intervall <- c("[300, 400)", "[400, 500)", "[500, 600)", "[600, 700)", "[700, 800)")
Haeufigkeit <- c(13, 25, 66, 58, 38)
lebensdauer <- data.frame(Intervall, Haeufigkeit)
kable(lebensdauer)
knitr::opts_chunk$set(echo = TRUE)
bmw <- read.csv2("C:/Users/rafaa/Desktop/HTW MODULE/Semester 3/Statistik/data/bmw.csv")
schluss <- as.numeric(bmw$Schluss)
# a)
# Mittlere absolute Abweichung vom arithmetischen Mittel
mean(abs(schluss - mean(schluss)))
# Varianz
mean((schluss - mean(schluss))^2)
# Standardabweichung
sqrt(mean((schluss - mean(schluss))^2))
# b)
# Mittlere absolute Abweichung vom arithmetischen Mittel
mean(abs(schluss - mean(schluss)))
# Varianz
var(schluss)
# Standardabweichung
sd(schluss)
# Variationskoeffizient Volkswagen
10.28 / 174.56 * 100
# Variationskoeffizient BMW AG
4.68 / 36.96 * 100
# 5,89% und 12,66%.
#Ein niedrigerer Variationskoeffizient deutet auf eine geringere Streuung im Verhältnis zum Mittelwert hin, während ein höherer Wert auf eine größere Streuung hindeutet.
#In diesem Fall hat die BMW-Aktie einen höheren Variationskoeffizienten als die Volkswagenaktie, was darauf hindeutet, dass die Streuung der BMW-Aktie im Verhältnis zum Mittelwert größer ist als die Streuung der Volkswagenaktie.
#Dies könnte darauf hinweisen, dass die BMW-Aktie volatiler ist oder größere Schwankungen im Preis im Vergleich zur Volkswagenaktie aufweist.
library(knitr)
zulassungen <- read.csv("C:/Users/rafaa/Desktop/HTW MODULE/Semester 3/Statistik/data/neuzulassungen.csv")
kable(zulassungen)
# Daten laden
Stueckzahl <- zulassungen$Stueckzahl
# Sortieren der Stückzahlen
Stueckzahl_sortiert <- sort(Stueckzahl)
# Absolute Häufigkeit (h_i)
h_i <- rep(1, length(Stueckzahl_sortiert))
# Relative Häufigkeit (f_i)
f_i <- h_i / length(Stueckzahl_sortiert)
# Kumulierte relative Häufigkeit (F_i)
F_i <- cumsum(f_i)
# Stückzahl jedes Herstellers (h_i^*)
h_i_star <- Stueckzahl_sortiert
# Relative Stückzahl jedes Herstellers (f_i^*)
f_i_star <- h_i_star / sum(h_i_star)
# Kumulierte relative Stückzahl (F_i^*)
F_i_star <- cumsum(f_i_star)
# Lorenzkurve plotten
plot(F_i_star, F_i, type = "l", col = "blue", xlab = "Kumulierte relative Stueckzahl", ylab = "Kumulierte relative Haeufigkeit", main = "Lorenzkurve")
lorenz <- Lc(Stueckzahl)
library(ineq)
library(ineq)
install.packages("ineq")
library(ineq)
lorenz <- Lc(Stueckzahl)
# Lorenzkurve plotten
plot(lorenz, col = "blue", xlab = "Kumulierte relative Stueckzahl", ylab = "Kumulierte relative Hauefigkeit", main = "Lorenzkurve")
install.packages("ineq")
install.packages("ineq")
library(ineq)
lorenz <- Lc(Stueckzahl)
# Lorenzkurve plotten
plot(lorenz, col = "blue", xlab = "Kumulierte relative Stueckzahl", ylab = "Kumulierte relative Hauefigkeit", main = "Lorenzkurve")
install.packages("ineq")
install.packages("ineq")
library(ineq)
lorenz <- Lc(Stueckzahl)
# Lorenzkurve plotten
plot(lorenz, col = "blue", xlab = "Kumulierte relative Stueckzahl", ylab = "Kumulierte relative Hauefigkeit", main = "Lorenzkurve")
install.packages("ineq")
knitr::opts_chunk$set(echo = TRUE)
install.packages("ineq")
library(ineq)
lorenz <- Lc(Stueckzahl)
# Lorenzkurve plotten
plot(lorenz, col = "blue", xlab = "Kumulierte relative Stueckzahl", ylab = "Kumulierte relative Hauefigkeit", main = "Lorenzkurve")
Intervall <- c("[300, 400)", "[400, 500)", "[500, 600)", "[600, 700)", "[700, 800)")
Haeufigkeit <- c(13, 25, 66, 58, 38)
lebensdauer <- data.frame(Intervall, Haeufigkeit)
kable(lebensdauer)
Intervall <- c("[300, 400)", "[400, 500)", "[500, 600)", "[600, 700)", "[700, 800)")
Haeufigkeit <- c(13, 25, 66, 58, 38)
install.packages("knitr")
library(knitr)
Intervall <- c("[300, 400)", "[400, 500)", "[500, 600)", "[600, 700)", "[700, 800)")
Haeufigkeit <- c(13, 25, 66, 58, 38)
lebensdauer <- data.frame(Intervall, Haeufigkeit)
kable(lebensdauer)
install.packages("knitr")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
install.packages("knitr")
library(knitr)
Intervall <- c("[300, 400)", "[400, 500)", "[500, 600)", "[600, 700)", "[700, 800)")
Haeufigkeit <- c(13, 25, 66, 58, 38)
lebensdauer <- data.frame(Intervall, Haeufigkeit)
kable(lebensdauer)
install.packages("knitr")
library(knitr)
Intervall <- c("[300, 400)", "[400, 500)", "[500, 600)", "[600, 700)", "[700, 800)")
Haeufigkeit <- c(13, 25, 66, 58, 38)
lebensdauer <- data.frame(Intervall, Haeufigkeit)
kable(lebensdauer)
index <- 1:nrow(lebensdauer)
index
index <- 1:length(Intervall)
index
Intervallmitte <- sapply(strsplit(gsub("\\[|\\)", "", lebensdauer$Intervall), ","), function(x) mean(as.numeric(x)))
Intervallmitte
Intervallmitte <- 300+500 / 2
Intervallmitte
Intervallmitte <- >(300+500) / 2
Intervallmitte
Intervallmitte <- (300+500) / 2
Intervallmitte
Intervallmitte <- (300+800) / 2
Intervallmitte
# Entferne Klammern und andere nicht-numerische Zeichen
clean_interval <- gsub("\\[|\\)|\\(|\\]", "", intervall)
clean_interval
# Entferne Klammern und andere nicht-numerische Zeichen
clean_interval <- gsub("\\[|\\)|\\(|\\]", "", intervall)
clean_interval
# Entferne Klammern und andere nicht-numerische Zeichen
clean_interval <- gsub("\\[|\\)|\\(|\\]", "", intervall)
clean_interval <- gsub("\\[|\\)|\\(|\\]", "", intervall)
clean_interval
library(knitr)
Intervall <- c("[300, 400)", "[400, 500)", "[500, 600)", "[600, 700)", "[700, 800)")
Haeufigkeit <- c(13, 25, 66, 58, 38)
index <- 1:length(Intervall)
# Funktion zur Berechnung der Intervallmitte
berechne_intervallmitte <- function(intervall) {
# Entferne Klammern und andere nicht-numerische Zeichen
clean_interval <- gsub("\\[|\\)|\\(|\\]", "", intervall)
# Teile das Intervall in zwei Teile durch das Komma
bounds <- as.numeric(unlist(strsplit(clean_interval, ",")))
# Berechne die Mitte
return(mean(bounds))
}
lebensdauer <- data.frame(index, Intervall, Haeufigkeit, berechne_intervallmitte)
library(knitr)
# Given data
Intervall <- c("[300, 400)", "[400, 500)", "[500, 600)", "[600, 700)", "[700, 800)")
Haeufigkeit <- c(13, 25, 66, 58, 38)
index <- 1:length(Intervall)
# Function to calculate the interval midpoint
berechne_intervallmitte <- function(intervall) {
clean_interval <- gsub("\\[|\\)|\\(|\\]", "", intervall)
bounds <- as.numeric(unlist(strsplit(clean_interval, ",")))
return(mean(bounds))
}
# Calculate interval midpoint for each interval
intervallmitte <- sapply(Intervall, berechne_intervallmitte)
# Create the data frame
lebensdauer <- data.frame(index = index, Intervall = Intervall, Haeufigkeit = Haeufigkeit, Intervallmitte = intervallmitte)
# Print the data frame
kable(lebensdauer)
library(knitr)
# Given data
Intervall <- c("[300, 400)", "[400, 500)", "[500, 600)", "[600, 700)", "[700, 800)")
Haeufigkeit <- c(13, 25, 66, 58, 38)
index <- 1:length(Intervall)
# Function to calculate the interval midpoint
berechne_intervallmitte <- function(intervall) {
clean_interval <- gsub("\\[|\\)|\\(|\\]", "", intervall)
bounds <- as.numeric(unlist(strsplit(clean_interval, ",")))
return(mean(bounds))
}
# Calculate interval midpoint for each interval
intervallmitte <- sapply(Intervall, berechne_intervallmitte)
# Create the data frame
lebensdauer <- data.frame(index = index, Intervall = Intervall, Haeufigkeit = Haeufigkeit, Intervallmitte = intervallmitte)
# Print the data frame
kable(lebensdauer)
# Relative Häufigkeit
rel_heufigkeit <-  Haeufigkeit / sum(Haeufigkeit)
library(knitr)
# Given data
Intervall <- c("[300, 400)", "[400, 500)", "[500, 600)", "[600, 700)", "[700, 800)")
Haeufigkeit <- c(13, 25, 66, 58, 38)
index <- 1:length(Intervall)
# Function to calculate the interval midpoint
berechne_intervallmitte <- function(intervall) {
clean_interval <- gsub("\\[|\\)|\\(|\\]", "", intervall)
bounds <- as.numeric(unlist(strsplit(clean_interval, ",")))
return(mean(bounds))
}
# Calculate interval midpoint for each interval
intervallmitte <- sapply(Intervall, berechne_intervallmitte)
# Relative Häufigkeit
rel_heufigkeit <-  Haeufigkeit / sum(Haeufigkeit)
# Create the data frame
lebensdauer <- data.frame(index = index, Intervall = Intervall, Haeufigkeit = Haeufigkeit, Intervallmitte = intervallmitte, rel_heufigkeit = rel_heufigkeit)
# Print the data frame
kable(lebensdauer)
rel_heufigkeitXintervallmitte = intervallmitte * rel_heufigkeit
intervallmitte2 = intervallmitte^2
library(knitr)
# Given data
Intervall <- c("[300, 400)", "[400, 500)", "[500, 600)", "[600, 700)", "[700, 800)")
Haeufigkeit <- c(13, 25, 66, 58, 38)
index <- 1:length(Intervall)
# Function to calculate the interval midpoint
berechne_intervallmitte <- function(intervall) {
clean_interval <- gsub("\\[|\\)|\\(|\\]", "", intervall)
bounds <- as.numeric(unlist(strsplit(clean_interval, ",")))
return(mean(bounds))
}
# Calculate interval midpoint for each interval
intervallmitte <- sapply(Intervall, berechne_intervallmitte)
# Relative Häufigkeit
rel_heufigkeit <-  Haeufigkeit / sum(Haeufigkeit)
rel_heufigkeitXintervallmitte = intervallmitte * rel_heufigkeit
intervallmitte2 = intervallmitte^2
rel_heufigkeitXintervallmitte2 = intervallmitte2 * rel_heufigkeit
# Create the data frame
lebensdauer <- data.frame(index = index, Intervall = Intervall, Haeufigkeit = Haeufigkeit, Intervallmitte = intervallmitte, rel_heufigkeit = rel_heufigkeit, rel_heufigkeitXintervallmitte = rel_heufigkeitXintervallmitte, intervallmitte2 = intervallmitte2, rel_heufigkeitXintervallmitte2=rel_heufigkeitXintervallmitte2)
# Print the data frame
kable(lebensdauer)
